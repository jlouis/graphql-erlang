## QUERIES

query RoomErrors1($id : ID!) {
  room(id: $id) {
    id
    magic
  }
}

query RoomErrors2($id : ID!) {
  room(id: $id) {
    id
    leyline
  }
}

query FindQueryParamSingleton($m : Mood) {
  findMonsters(moods: $m) {
    name
  }
}

query FindQuerySingleton {
  findMonsters(moods: DODGY) {
    name
  }
}

query FindQueryParam($m : [Mood]!) {
  findMonsters(moods: $m) {
    name
  }
}

query FindQuery {
  findMonsters(moods: [DODGY]) {
    name
  }
}

query ThingQ1 {
  things(ids: ["bW9uc3Rlcjox"]) {
    ... on Item {
      __typename
    }
  }
}

query ThingQ2 {
  things(ids: ["bW9uc3Rlcjox"]) {
    ... on Monster {
      __typename
      name
    }
  }
}

query ThingQ3 {
  things(ids: ["bW9uc3Rlcjox"]) {
    __typename
  }
}

query InvalidEnumOutput($id : Id! =  "bW9uc3Rlcjox") {
  goblin: monster(id: $id) {
    id
    mood(fail: true)
  }
}

query GoblinQuery($id : Id! = "bW9uc3Rlcjox") {
  goblin: monster(id: $id) {
    id
    name
    hitpoints
  }
}

query GoblinQueryDirectives($id : Id! = "bW9uc3Rlcjox", $fat : Boolean!) {
  goblin: monster(id: $id) {
    id
    name @include(if: $fat)
    hitpoints
  }
}

query GoblinQueryDirectivesInline($id : Id! = "bW9uc3Rlcjox", $fat : Boolean!) {
  goblin: monster(id: $id) {
    id
    ... @include(if: $fat) {
      name
      hitpoints
    }
  }
}

query MinGoblin($id : Id! = "bW9uc3Rlcjox", $minAttack : int!) {
  goblin: monster(id: $id) {
    id
    name
    stats(minAttack: $minAttack) {
        attack
    }
  }
}

query GoblinThingQuery($id : Id!) {
  goblin: thing(id: $id) {
    ...MonsterFragment
  }
}

query ScalarOutputCoercion($id : Id!) {
  goblin: monster(id: $id) {
    ...MonsterFragment
    color
  }
}

query ReplaceEnumRepresentation($id : Id!) {
  goblin: monster(id: $id) {
    id
    mood
  }
}

query MultipleMonsters($ids : [Id!]) {
    monsters(ids: $ids) {
        id
    }
}

query GetMonster($id : ID!, $colorType : ColorType) {
    monster(id: $id) {
        id
        name
        color(colorType : $colorType)
    }
}

query MultipleMonstersExpr {
    monsters(ids: ["bW9uc3Rlcjox", "bW9uc3Rlcjoy"]) {
        id
    }
}

query MultipleMonstersExprMissing {
    monsters(ids: ["bW9uc3Rlcjox", "bW9uc3Rlcjoz", "bW9uc3Rlcjoy", "bW9uc3Rlcjo0"]) {
        id
    }
}

query MultipleRooms($ids : [Id!]) {
    rooms(ids: $ids) {
        id
    }
}


query InlineFragmentTest($id : Id!) {
  thing(id: $id) {
    ... on Monster {
      id
      hitpoints
    }
  }
}

query FragmentOverUnion1($id: Id!) {
  monster(id: $id) {
    ... on Thing {
      ... on Monster {
        id
      }
    }
  }
}

query MonsterStatsZero($id: Id!) {
  monster(id: $id) {
      stats {
          attack shellScripting yell
      }
  }
}

query MonsterStatsOne($id: Id!) {
  monster(id: $id) {
    statsVariantOne {
      attack shellScripting yell
    }
  }
}

query MonsterStatsTwo($id: Id!) {
  monster(id: $id) {
    statsVariantTwo {
       attack shellScripting yell
    }
  }
}

query MonsterStatsThree($id: Id!) {
  monster(id: $id) {
     statsVariantThree {
         attack shellScripting yell
     }
  }
}

query FragmentOverUnion2($id: Id!) {
  monster(id: $id) {
    ...UnionThingFragment
  }
}

fragment UnionThingFragment on Thing {
  ... on Monster {
    id
  }
}

query FragmentOverUnion3($id: Id!) {
  monster(id: $id) {
    ... on Node {
      id
    }
  }
}

query TestFieldMerge($id: Id!) {
  monster(id: $id) {
    id
    hitpoints
    hitpoints
  }
}

query LookupThing($id: Id!) {
  thing(id: $id) {
    ... on Monster {
      id
    }
  }
}

query TestNestedFieldMerge($id: Id!) {
  monster(id: $id) {
    id
    hitpoints
    ...MonsterFragmentNested1
    ...MonsterFragmentNested2
    stats {
        yell
    }
  }
}

query IntrospectionDefault {
    __type(name: "Monster") {
        fields {
            name
            args {
                name
                defaultValue
            }
        }
    }
}

fragment MonsterFragmentNested1 on Monster {
    hitpoints
    stats { attack }
}

fragment MonsterFragmentNested2 on Monster {
    stats { shellScripting }
}

query TestAuxiliaryData($id: Id!) {
  monster(id: $id) {
    id
    name
  }
}

query RollX1($delay: Int){
  roll(delay: $delay) {
    rollDefer
  }
}

query RollX2 ($delay: Int){
  roll(delay: $delay) {
    rollDefer
    rollDeferX2
  }
}

query RollX3 ($delay: Int){
  roll(delay: $delay) {
    rollDefer
    rollDeferX2
    rollDeferX3
  }
}
query RollX5($delay: Int){
  roll(delay: $delay) {
    rollDefer
    rollDeferX2
    rollDeferX3
    rollDeferX5
  }
}

## MUTATIONS
mutation IntroduceMonster($input: IntroduceMonsterInput!) {
  introduceMonster(input: $input) {
    clientMutationId
    monster {
      ...FatMonsterFragment
      stats {
          attack
      }
    }
  }
}

mutation IntroduceMonsterFat($input: IntroduceMonsterInput!) {
  introduceMonster(input: $input) {
    clientMutationId
    monster {
      ...FatMonsterFragment
      plushFactor
      stats {
        attack,
        shellScripting
        yell
      }
    }
  }
}

mutation IntroduceMonsterFatFixedInput {
    introduceMonster(input: {
      clientMutationId: "123",
      name: "Yellow Slime",
      color: "#ffff33",
      hitpoints: 1337
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        properties
        stats {
          attack
        }
      }
    }
}

mutation IntroduceMonsterFatExpr($properties : [Property]) {
  introduceMonster(input:
    { clientMutationId: "123",
      name: "Green Slime",
      color: "#1be215",
      hitpoints: 9001,
      mood: TRANQUIL,
      properties: $properties,
      stats: [{
        attack: 7,
        shellScripting: 5,
        yell: "..."
      }]
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        stats {
          attack
          shellScripting
          yell
        }
      }
    }
}

mutation IntroduceMonsterNestedVar($mood : Mood = AGGRESSIVE) {
  introduceMonster(input:
    { clientMutationId: "123",
      name: "Giant Spider",
      color: "#888888",
      hitpoints: 100,
      mood: $mood,
      properties: [BEAST],
      stats: [{
        attack: 12,
        shellScripting: 0,
        yell: "I LOVE WEAVING!"
      }]
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        stats {
          attack
          shellScripting
          yell
        }
      }
    }
}

mutation IntroduceMonsterDefaultNestedVar($mood : Mood = AGGRESSIVE) {
  introduceMonster(input:
    { clientMutationId: "123",
      name: "Tiny Evil Cat",
      color: "#444444", # Cats are very grey!
      hitpoints: 9001,
      mood: $mood,
      properties: [BEAST],
      plushFactor: 57.0,
      stats: [{
        attack: 1337,
        shellScripting: 10,
        yell: "Purrrrrrrrrrrrrr!"
      }]
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        stats {
          attack
          shellScripting
          yell
        }
      }
    }
}

mutation IntroduceMonsterOptionalNestedVar($mood : Mood) {
  introduceMonster(input:
    { clientMutationId: "123",
      name: "Teeny Tiny Mouse",
      color: "#ffffff", # Makes your eyes bleed
      hitpoints: 1,
      mood: $mood,
      properties: [BEAST],
      plushFactor: 10.0,
      stats: [{
        attack: 1,
        shellScripting: 1,
        yell: "Meek!"
      }]
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        stats {
          attack
          shellScripting
          yell
        }
      }
    }
}

mutation IntroduceMonsterNullHandling($pf : Float) {
  introduceMonster(input:
    { clientMutationId: "123",
      name: "Tiny Black Hole",
      color: "#000000", # Makes your eyes bleed
      hitpoints: 9002,
      properties: [BEAST],
      plushFactor: $pf,
      stats: [{
        attack: 1,
        shellScripting: 1,
        yell: "..."
      }]
    }) {
      clientMutationId,
      monster {
        ...FatMonsterFragment
        plushFactor
        stats {
          attack
          shellScripting
          yell
        }
      }
    }
}

mutation IntroduceRoom($input: IntroduceRoomInput!) {
  introduceRoom(input: $input) {
    clientMutationId
    room {
      ...RoomFragment
    }
  }
}

mutation SpawnMinion($input: SpawnMinionInput!) {
  spawnMinion(input: $input) {
    clientMutationId
    room {
      ...RoomFragment
      contents { ...SimpleMonster }
    }
    monster {
      name
      id
    }
  }
}

## FRAGS

fragment MonsterFragment on Monster {
  id
  name
  hitpoints
}

fragment SimpleMonster on Monster {
  name
  hitpoints
}

fragment FatMonsterFragment on Monster {
  ...MonsterFragment
  color
  mood
  properties
}

fragment RoomFragment on Room {
  id
  description
}
